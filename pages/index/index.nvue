<template>
	<view class="tabs">
		<view class="bg"></view>
		<view class="move-box" :class="[isStopWalk? 'move-box-stop-walk' : '']" :style="{left: position.initX + 'px', top: position.initY + 'px'}" ref="avatarWrap" @touchstart="touchmove">
			<image class="move-box-img" src="/static/index/avatar1.jpg" mode="" ref="ssd"></image>
		</view>
		<swiper class="swiper" :indicator-dots="true" autoplay :interval="5000" :duration="1000" circular >
			<swiper-item class="swiper-item" v-for="item in swiperUrl">
				<image class="swiper-image" :src="item" mode="" @click="previewImage(item)"></image>
			</swiper-item>
		</swiper>
		
		<view class="time-wrap">
			<view class="time">
				<text class="time-left">{{day}}天</text>
				<view class="time-right">
					<text class="time-right-date LcdD">{{date}}</text>
					<text class="time-right-time LcdD">{{time}}</text>
				</view>
			</view>
			<image class="time-wrap-avatar" src="/static/index/avatar2.jpg" mode="" @tap="avatarTop"></image>
			<view class="time-wrap-avatar time-wrap-me" ref="avatar2">
				<!-- <image class="time-wrap-me-img" src="/static/index/avatar1.jpg" mode="" ref="avatar1" @touchstart="avatarMove"></image> -->
			</view>
			<!-- <image class="time-wrap-avatar time-wrap-me" src="/static/index/avatar1.jpg" mode="" ref="avatar1" @touchstart="avatarMove"></image> -->
		</view>
		<view class="list">
			<view class="list-line">
				<view class="list-item" @click="gotoSnow" >
					<image class="list-item-image" src="/static/index/snow.jpg" mode=""></image>
					<text class="list-item-text">下雪啦</text>
				</view>
				<view class="list-item" @click="gotoTodoList">
				<!-- <view class="list-item"> -->
					<image class="list-item-image" src="/static/index/todo.jpg" mode=""></image>
					<!-- <text>期待~</text> -->
				</view>
			</view>
			<view class="list-line">
				<view class="list-item">
				<!-- <view class="list-item"> -->
					<image class="list-item-image" src="/static/index/wait.jpg" mode=""></image>
					<!-- <text>期待~</text> -->
				</view>
			</view>
		</view> 
		
		<updateView ref="updateView" v-if="update.isShow"></updateView>
		<loginView v-if="loginViewShow" :show.sync="loginViewShow"></loginView>
	</view>
</template>

<script>
	import { timeFormat, DateDiff } from '@/utils/tool.js'
	import moveMixin from '@/pages/index/moveMixin'
	import updateMixin from '@/pages/index/updateMixin'
	
	import loginView from '@/pages/login/login'
	
	export default {
		mixins: [moveMixin, updateMixin],
		components: {
			loginView
		},
		data() {
			return {
				swiperUrl: [
					'/static/index/swiper1.jpg',
					'/static/index/swiper2.png',
					'/static/index/swiper3.jpg',
					'/static/index/swiper4.jpg',
				],
				bannerTimer: null,
				day: 0,
				date: '',
				time: '',
				loginViewShow: false,
			}
		},
		onReady() {
			this.checkSession()
			this.checkUpdate()
			this.initMoving()
		},
		beforeCreate() {
			// const domModule = uni.requireNativePlugin('dom')
			// domModule.addRule('fontFace', {
			// 	'fontFamily': "fontLcdD",
			// 	'src': "url('https://vkceyugu.cdn.bspapp.com/VKCEYUGU-321867fe-4c25-4a3d-9f1f-018855bc5a44/cfb9ccab-061e-4774-921d-70bde7276d7d.ttf')"
			// });
		},
		onShow(e) {
			console.log('index onShow')
			this.starBannerTimer()
			// 清除角标
			plus.runtime.setBadgeNumber(0)

		},
		onHide() {
			console.log('index onHide')
			this.stopBannerTimer()
		},
		methods: {
			test() {
				uni.navigateTo({
					url: '/pages/img/index'
				})
				
				return
				uni.chooseImage({
				    count: 6, //默认9
				    sizeType: ['original', 'compressed'], //可以指定是原图还是压缩图，默认二者都有
				    sourceType: ['album'], //从相册选择
				    success: function (res) {
				        console.log(JSON.stringify(res.tempFilePaths));
				    }
				});
			},
			starBannerTimer() {
				this.bannerTimer = setInterval(() => {
					const now = new Date()
					this.date = timeFormat(now, 'yyyy-MM-dd')
					this.time = timeFormat(now, 'hh:mm:ss')
					this.getDays()
					// console.log('timeFormat', this.time)
				}, 1000)
			},
			stopBannerTimer() {
				clearInterval(this.bannerTimer)
			},
			
			gotoSnow() {
				uni.navigateTo({
					url: '/pages/webview/index'
				})
			},
			gotoTodoList() {
				uni.navigateTo({
					url: '/pages/todo/list',
				})
			},
			getDays() {
				this.day =  DateDiff('2020-07-11', timeFormat(new Date(), 'yyyy-MM-dd'))
			},
			previewImage(url) {
				uni.previewImage({
					urls: [url]
				})
			},
			checkSession() {
				const sessionId = uni.getStorageSync('sessionId') || ''
				if(sessionId) {
					uni.$http({
					    name: 'first',
					    data: { 
							url: 'user/checkSession',
							data: {}
						}
					}).then(res => {
						const resData = res.result
						if(resData.code == 0) {
							
						}else {
							setTimeout(() => {
								this.loginViewShow = true
							}, 200)
						}
					}).catch(err => {
						// uni.hideLoading()
						console.log('err', err)  
					})
				}else {
					setTimeout(() => {
						this.loginViewShow = true
					}, 200)
				}
			}
			
		}
	}
</script>

<style lang="scss">
	.LcdD {
		font-family: fontLcdD;
		// font-size:60rpx;
		color: #fff;
		padding-right: 4rpx;
	}
	.tabs {
		background-color: #aecfff; 
		background-image: linear-gradient(to bottom, #999, #fff);
		// flex:1;  
		align-items: center;
	}
	.move-box {
		position: fixed;
		// top: 0;
		// left: 0;
		width: 100rpx;
		height: 100rpx;
		border: 4rpx #0b822c solid;
		border-radius: 50%;
		justify-content: center;
		align-items: center;
		&-stop-walk {
			border: 4rpx #666 solid;
		}
		&-img {
			width: 96rpx;
			height: 96rpx;
			border-radius: 50%;
		}
	}
	.swiper {
		width: 750rpx;
		height: 400rpx;
	}
	.swiper-image {
		width: 750rpx;
	}
	.clock {
		width: 400rpx;
		height: 400rpx;
	}
	.time-wrap {
		margin-top: 20rpx;
		position: relative;
		width: 720rpx;
		height: 260rpx;
		justify-content: flex-end;
		&-avatar {
			position: absolute;
			width: 100rpx;
			height: 100rpx;
			top: 0rpx;
			left: 30rpx;
			border-radius: 50%;
		}
		&-me {
			left: 110rpx;
			// background-color: #FF0000;
			&-img {
				width: 100rpx;
				height: 100rpx;
				border-radius: 50%;
			}
		}
	}
	.time {
		width: 720rpx;
		height: 200rpx;
		padding: 30rpx;
		border-radius: 16rpx;
		background-color: #ff8f0a;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		opacity: 0.8;
		&-left {
			font-size: 72rpx;
			color: #fff;
		}
		&-right {
			align-items: flex-end;
			&-date {
				font-size: 40rpx;
				color: #ccc;
			}
			&-time {
				font-size: 30rpx;
				color: #ccc;
			}
		}
		
	}
	
	.list {
		padding: 30rpx;
		margin-top: 10rpx;
		width: 750rpx;
		// align-items: center;
		&-line {
			margin-bottom: 30rpx;
			flex-direction: row;
			justify-content: space-between;
		}
		&-item {
			position: relative;
			width: 330rpx;
			height: 330rpx;
			border-radius: 16rpx;
			background-color: #fff;
			padding-bottom: 30rpx;
			align-items: center;
			justify-content: flex-end;
			&-image {
				position: absolute;
				top: 0;
				left: 0;
				width: 330rpx;
				height: 330rpx;
				border-radius: 16rpx;
			}
			// &-text {
			// 	color: #ffcd43;
			// }
		
		}
	}
	
	
</style>
