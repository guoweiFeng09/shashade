<template>
	<view class="drag-box">
		<view 
			v-for="(item,index) in dataList"
			:key="index"
			:style="{top: item.top +'px',
				height: (itemHeight - 1)+'px'}"
			class="drag-item"
			:class="{'drag-active': item.isActive}"
			@longtap="longtap(item,index)"
			@touchstart="touchstart"
			@touchmove="touchmove"
			@touchend="touchend(item)">
				<view style="padding: 13px 0;">
					<h1 style="font-size: 18px;margin: 0;">1111111111</h1>
					<p style="font-size: 16px;margin: 0;">2222222222</p>
				</view>
			</view>
	</view>
</template>

<script>
	export default {
		props: {
		  list: {
		    type: Array,
		    default: () => ([])
		  },
		  itemKey: {
		    type: [String],
		  },
		  itemHeight: {
		    type: [Number],
		    default: 70
		  }
		},
		data() {
			return {
				activeItem: null,
				isDrag: false,
				dragTargetY: 0,
				dragTargetIndex: 0,
				// itemHeight: 70,
				dynamicSort: [],
				dragTargetDynamicIndex: 0,
				dataList: [],
			}
		},
		watch: {
		  list: {
		    immediate: true,
		    deep: true,
		    handler (list) {
		      this.setList(list)
		    }
		  }
		},
		methods: {
			touchstart(e){
				this.dragTargetY = e.touches[0].pageY;
			},
			longtap(item,index){
				this.activeItem = item;
				this.dragTargetIndex = index;
				this.dragTargetDynamicIndex = this.dynamicSort[index];
				this.isDrag = true;
				item.isActive = true;
			},
			touchmove(e){
				if(!this.isDrag){
					return
				}
				let newY = e.touches[0].pageY;
				let d = newY - this.dragTargetY;
				this.activeItem.top += d;
				var _this = this;
				uni.createSelectorQuery().selectAll('.drag-box .drag-item').boundingClientRect().exec(function(resp){
					let items = resp[0];
					let targetTop = items[_this.dragTargetIndex].top;
					for (let i=0;i<items.length;i++){
						let item = items[i];
						if(_this.dynamicSort[i] < _this.dragTargetDynamicIndex){
							if(item.top > targetTop){
								_this.dataList[i].top = _this.dataList[i].top + _this.itemHeight;
								_this.swapArray(_this.dragTargetIndex,i);
								_this.dragTargetDynamicIndex --;
								break;
							}
						}else if(_this.dynamicSort[i] > _this.dragTargetDynamicIndex){
							if(item.top < targetTop){
								_this.dataList[i].top = _this.dataList[i].top - _this.itemHeight;
								_this.swapArray(_this.dragTargetIndex,i);
								_this.dragTargetDynamicIndex ++;
								break;
							}
						}
					}
					for (let i=0;i<_this.dynamicSort.length;i++){
						let item = _this.dynamicSort[i];
						
					}
				})
				this.dragTargetY = newY;
			},
			touchend(item){
				if(!this.isDrag){
					return
				}
				this.isDrag = false;
				item.isActive = false;
				this.dataList[this.dragTargetIndex].top = this.itemHeight*this.dragTargetDynamicIndex;
				let sortList = [];
				Array(this.dataList.length).fill(0).forEach((v,index)=>{
					let i= this.dynamicSort.indexOf(index);
					sortList.push(this.dataList[i]);
					console.log(i)
				});
				this.$emit('change', sortList);
			},
			swapArray(index1, index2) {//列表中两个元素交换位置
				if(index1 != index2){
					this.dynamicSort[index1] = this.dynamicSort.splice(index2, 1, this.dynamicSort[index1])[0];
				}
			},
			setList(list){
				this.dataList = list.map((item, index) => {
				  return {
				    ...item,
				    isActive: false,
					top: '',
				  }
				})
				this.init();
			},
			init(){
				Array(this.dataList.length).fill(0).forEach((v,index)=>{
					this.dynamicSort.push(index);
				});
				this.$nextTick(() => {
					var _this = this;
					uni.createSelectorQuery().selectAll('.drag-box .drag-item').boundingClientRect().exec(function(resp){
						
						console.log('resp', resp)
						let items = resp[0];
						for (let i=0;i<items.length;i++){
							let item = items[i];
							_this.dataList[i].top = i * _this.itemHeight;
						}
					})
			    });
			}
		},
		mounted() {
		}
	}
</script>

<style lang="scss">
	.drag-box{
		// width: 100%;
		height: 100%;
		position: relative;
	}
	.drag-item{
		// width: 100%;
		text-align: center;
		transition: all 0.5s;
		// background-color: #fff;
		background-color: #f00;
		z-index: 1;
		border-top: 1px solid #F5F5F5;
		position: absolute;
	}
	.drag-active{
		box-shadow: 0 8px 20px 0 #e6e6e6;
		transform: scale(1.1);
		z-index: 9 !important;
		// transition:  box-shadow .5s, transform .5s, top 0s !important;
	}
</style>